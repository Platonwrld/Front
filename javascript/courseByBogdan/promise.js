// промисы


// промисы позволяют обрабатывать отложенные во вемени события
// промис - это по сути обещания предоставить результат позже
// по сути асинхронность - это когда отправляется запрос на сервер, и не дожидаясь ответа программа работает дальше
// промис может вернуть ошибку, если результат получить невозможно 

// состояни промиса: состояние ожидания, исполнен, отклонен
// промис - это объект js


const myPromise = new Promise((reject, resolve) =>
{
    // выполнение асинхронных действий
    // внутри нужно вызвать одну из функций параметров
})

// получение результата промиса
myPromise
    .then(value =>
        {
            // действие в случае успешного выполнения промиса
            // значение value - это значение, переданное в вызове функции resolve внутри промиса 
        })
    .catch(error =>
        {
            // действие в случае отклонения промиса
            // значение error - это значение, переданное в вызову функции reject внутри промиса
        })


// получение данных с помощью fetch api
fetch('https://jsonplaceholder.typicode.com/todos')
.then(response => 
    {
        console.log(response)
        return response.json()
    })
.then(json => console.log(json))
.catch(error => console.error(error))


// async и await - упрощенный вариант работы с промисами, специальный синтаксис
// асинхронная функция вместо undefined возвращает промис

async function asyncFn ()
{
    // всегда возвращает промис
}

const asyncFn1 = async () =>
{
    // всегда возвращает промис
}

// создание промиса 
const asyncFn2 = async () =>
{
    return 'Success!'
}
// вызов функции с промисом
asyncFn2()
.then(value => console.log(value))