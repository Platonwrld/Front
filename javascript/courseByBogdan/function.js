// Функция - блок кода, который можно выполнять многократно

let a = 43
let b = 54

function sum (a, b) {                   // a и b - это параметры функции, а при вызове функции внесенные значения на место параметров будет именоваться аргументами
    const c = a + b
    console.log(c)
}

sum(a, b)

a = 5
b = 8

sum(a, b)


// функция может быть: именованной, присвоена перменной, анонимной, при вызове другой функции, значением свойства объекта
// функция вернет значение undefined, если не будет return

// передача объекта функции 
// в данном примере получается мутация объекта через функцию
const personOne =
{
    name:'Bob',
    age: 25,
}

function increasePersonAge(person)  
{
    person.age += 1
    return person
}

increasePersonAge(personOne)
console.log(personOne.age)


// внутри функции не рекомендуется мутировать внешние объекты, лучше создать копию объекта

const personTwo =                                                   // создание объекта
{
    name:'Bob',
    city: 'Volgograd',
    age: 56
}

function increasePersonAge2(person)                                 // функция, котороя принимает как аргумент объект 
{
    const updatedPerson = Object.assign({}, person)                 // переменная будет ссылаться на создание копии объект
    updatedPerson.age +=1                                           // добавление 1 к значению свойства age
    return updatedPerson                                        
}

const updatedPersonOne = increasePersonAge2(personTwo)              // создание переменной в которой будет вызвана функция, аргумент который будет объект с свойствами
console.log(updatedPersonOne.age)                                   // вывод переменной котороя была передана функция, которая создает копию объекта и добавляет 1 к свойству age в копии


// колбэк функции - это когда одна функция вызывает внутри себя другую функцию, иными словами функция которая передается аргументом в другую функцию, чтобы другая функция использовала ее внутри себя

function printMyName () 
{
    console.log('Danil!')
}

console.log('Start...')

setTimeout(printMyName, 1000)               // setTimeout - это свойство объекта global, которое устанавливает время через которое выполнится функция



// область видимости определяет границы действий переменной (глобальная, локальная)
// в одном коде переменная b локальной области и глобальной - это две разные переменные
// локальная область видимости функции к примеру может быть в функции
// обычно переменная по нарастающей ищет значение сначала в своей области видимости и далее, если не находит, ищет в другой области видимости, в котороя находится ее область видимости и так пока не найдет

const ar = 5

function myFN() 
{
    function myFM()
    {
        console.log(ar)
    }
    myFM()
}

myFN()

// пример жизненных циклов переменной var и bar
let bar
let varg

function uN()
{
    let bar
    varg = true
    bar = 10
    console.log(bar)
}

uN()

console.log(bar)
console.log(varg)

// типы областей видимости: глобальная, область видимости функции, область видимсоти блока
// в js важно объявлять переменные перед их использованием, использовать const где это возможно

// строгий режим - это добвление инуструкции 'use strict' перед кодом, чтобы код проверялся тщательнее