// первым выводом будут вызваны 2 метода с кносолом, далее функция setTimeout, которая будет просто зарегстрирована, но с таймомо, далее консоль end
// и уже потом будет выполнена функция с таймаутом

// эта концепция называется event loop
// функции выполняются в стеке
console.log('hello')
console.log('start')
// эта функция вренет console.log через 5 секунд
// браузер видит эту функцию, регстрирует ее в стеке и начинает ждать в webapi
// когда читается код, браузер выкидывает функцию из стека и регает функцию, но сам браузер отчитывает время и только затем функция выполняется в стеке
// функция не блокируется, а ждет свой черед в очереди в callback Queue
// далее когда закончат выполняться другие функции, время для анонимной фуннкции с таймаутом

setTimeout(function() {
    return console.log('5000ms')
}, 5000)

console.log('end')

// кнокпи тоже работают как слушатели на стороне WebApi и по нажатию попадают в callback Queue
// дожидаясь своей очереди функция попадет в стек и выполняется


// ===================================================
// фактически async и await это распределение логики задач, которые должны выполняться по очереди, то есть слудующая функция будет ждать выполнения
// предыдущей функции и поэтому все будет выполняться по очереди 